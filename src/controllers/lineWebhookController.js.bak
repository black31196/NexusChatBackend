// api/controllers/lineWebhookController.js
//const {NODE_ENV} = require('../../models/express');

const line = require('@line/bot-sdk');
const { getIo } = require('../sockets/socketManager');
const logger = require('../utils/logger');
const path = require('path');


if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config({
    path: path.resolve(__dirname, '../../.env.lineOA')
  });
}

const lineConfig = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};

// LINE SDK configuration
const client = new line.Client(lineConfig);

// The main webhook handler function
const handleWebhook = (req, res) => {
  Promise.all(req.body.events.map(handleEvent))
    .then((result) => res.status(200).json(result))
    .catch((err) => {
      logger.error('Error processing webhook event:', err);
      res.status(500).end();
    });
};

const handleEvent = async (event) => {
  if (event.type !== 'message' || event.message.type !== 'text') {
    return Promise.resolve(null);
  }

  const lineUserId = event.source.userId;
  const messageText = event.message.text;
  logger.info(`Processing message from ${lineUserId}: "${messageText}"`);

  try {

    // --- Step 3: Notify Agents via WebSocket ---
    const io = getIo(); // <-- GET the io instance from our manager
    io.emit('new_line_message', {
      user: {
        app_user_id: user.app_user_id,
        line_user_id: lineUserId,
        nickname: user.nickname,
      },
      message: messageDocument,
    });
    logger.info(`Emitted "new_line_message" event to agent dashboards.`);
    
    // For now, we won't send an echo reply. The conversation will happen via the agent dashboard.
    return Promise.resolve(null);

  } catch (error) {
    logger.error(`Failed to handle message for user ${lineUserId}:`, error);
    return Promise.reject(error);
  }
};

module.exports = { handleWebhook };
