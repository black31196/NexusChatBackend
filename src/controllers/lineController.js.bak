
const logger = require('../utils/logger');
const line = require('@line/bot-sdk');
const chatSvc = require('../services/chatService');

const lineConfig = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};
const client = new line.Client(lineConfig);

const handleWebhook = (req, res) => {
  Promise.all(req.body.events.map(handleEvent))
    .then((result) => res.status(200).json(result))
    .catch((err) => {
      logger.error('Error processing webhook event:', err);
      res.status(500).end();
    });
};

const handleEvent = async (event) => {
  if (event.type !== 'message' || event.message.type !== 'text') {
    return Promise.resolve(null);
  }

  const lineUserId = event.source.userId;
  const messageText = event.message.text;
  logger.info(`Processing message from ${lineUserId}: "${messageText}"`);

  try {

// 1) persist
      const saved = await chatSvc.sendMessage({ from, to, content });

    // --- Step 3: Notify Agents via WebSocket ---
    const io = req.app.get('io'); // <-- GET the io instance from our manager
    if (io) {
        io.to(to).emit('receive_message', saved);
      }
    logger.info(`Emitted "new_line_message" event to agent dashboards.`);
    
    // For now, we won't send an echo reply. The conversation will happen via the agent dashboard.
    return Promise.resolve(null);

  } catch (error) {
    logger.error(`Failed to handle message for user ${lineUserId}:`, error);
    return Promise.reject(error);
  }
};

module.exports = { handleWebhook };